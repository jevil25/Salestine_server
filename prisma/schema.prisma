// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid()) @map("_id")
  name               String
  email              String    @unique
  password           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  role               Role      @default(USER)
  token              String?
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  Int?
  companyId          String?
  activeDeals        Int       @default(0)
  closedDeals        Int       @default(0)
  password_change    String    @default("")
  voice_rec          String    @default("")
  googleCalendar     String    @default("")
  company            Company?  @relation(fields: [companyId], references: [id])
  meeting            meeting[]
  folder             folder[]
  crmapi_ctr         String    @default("")
}

model Company {
  id         String    @id @default(cuid()) @map("_id")
  name       String
  email      String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ownerId    String    @default("")
  active     Boolean   @default(false)
  details    String    @default("")
  totalUsers Int       @default(0)
  adminId    String
  users      User[]
  meeting    meeting[]
  folder     folder[]
  tracker    tracker[]
}

model meeting {
  id           String       @id @default(cuid()) @map("_id")
  topic        String       @default("")
  companyid    String
  startTime    String
  meetid       String       @unique
  meetHostId   String
  meetPassword String
  awsKey       String?
  duration     Int?
  comments     comment[]
  transcript   transcript[]
  User         User?        @relation(fields: [meetHostId], references: [id])
  Company      Company?     @relation(fields: [companyid], references: [id])
  file         file[]
  analysis     analysis[]
  trim         trim[]
}

model file {
  id                    String   @id @default(cuid()) @map("_id")
  videoId               String
  timestamp             DateTime @default(now())
  meetingId             String   @unique
  transcriptionComplete Boolean? @default(false)
  diarizerText          String?
  summary               String?  @default("")
  trackerData           Json?
  analysisComplete      Boolean? @default(false)
  summaryComplete       Boolean? @default(false)
  trackerComplete       Boolean? @default(false)
  meeting               meeting  @relation(fields: [meetingId], references: [meetid])
  libraryId             String?
  folder                folder[] @relation(fields: [folderId], references: [id])
  folderId              String[]
}

model comment {
  id        String   @id @default(cuid()) @map("_id")
  author    String
  text      String
  timestamp DateTime @default(now())
  meetingId String
  meeting   meeting  @relation(fields: [meetingId], references: [meetid])
}

model transcript {
  id        String   @id @default(cuid()) @map("_id")
  text      String
  timestamp DateTime @default(now())
  startTime String
  endTime   String
  speaker   Int
  meetingId String
  meeting   meeting  @relation(fields: [meetingId], references: [meetid])
}

model analysis {
  id                   String   @id @default(cuid()) @map("_id")
  speaker              String?
  talkRatio            Json?
  longestMonologue     Json?
  longestCustomerStory Json?
  Interactivity        Json?
  patience             Json?
  question             Int?
  timestamp            DateTime @default(now())
  meetingId            String
  meeting              meeting  @relation(fields: [meetingId], references: [meetid])

  @@unique([meetingId, speaker])
}

model folder {
  id        String     @id @default(cuid()) @map("_id")
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorite  Boolean    @default(false)
  type      FolderType @default(PUBLIC)
  userId    String
  User      User       @relation(fields: [userId], references: [id])
  file      file[]     @relation(fields: [fileId], references: [id])
  fileId    String[]
  companyId String
  Company   Company    @relation(fields: [companyId], references: [id])
}

model trim {
  id        String   @id @default(cuid()) @map("_id")
  startTime Int
  endTime   Int
  meetingId String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meeting   meeting  @relation(fields: [meetingId], references: [meetid])
}

model tracker {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trackers  String[]
  companyId String   @unique
  Company   Company  @relation(fields: [companyId], references: [id])
}

enum Role {
  SUPERADMIN
  ADMIN
  OWNER
  USER
  PRESIDENT
  VICEPRESIDENT
}

enum FolderType {
  PUBLIC
  PRIVATE
}
