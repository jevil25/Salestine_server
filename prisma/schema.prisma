// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid()) @map("_id")
  name               String
  email              String    @unique
  password           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  role               Role      @default(USER)
  token              String?
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  Int?
  companyId          String?
  activeDeals        Int       @default(0)
  closedDeals        Int       @default(0)
  password_change    String    @default("")
  voice_rec          String    @default("")
  googleCalendar     String    @default("")
  company            Company?  @relation(fields: [companyId], references: [id])
  meeting            meeting[]
}

model Company {
  id         String    @id @default(cuid()) @map("_id")
  name       String
  email      String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ownerId    String    @default("")
  active     Boolean   @default(false)
  details    String    @default("")
  totalUsers Int       @default(0)
  adminId    String
  users      User[]
  meeting    meeting[]
}

model meeting {
  id            String       @id @default(cuid()) @map("_id")
  topic         String       @default("")
  companyid     String
  startTime     String
  meetid        String       @unique
  meetHostId    String
  meetPassword  String
  recordingLink String?      @default("")
  comments      comment[]
  transcript    transcript[]
  User          User?        @relation(fields: [meetHostId], references: [id])
  Company       Company?     @relation(fields: [companyid], references: [id])
  file          file[]
}

model file {
  id                    String   @id @default(cuid()) @map("_id")
  audioId               String
  videoId               String
  timestamp             DateTime @default(now())
  meetingId             String   @unique
  transcriptionComplete Boolean? @default(false)
  meeting               meeting  @relation(fields: [meetingId], references: [meetid])
}

model comment {
  id        String   @id @default(cuid()) @map("_id")
  author    String
  text      String
  timestamp DateTime @default(now())
  meetingId String
  meeting   meeting  @relation(fields: [meetingId], references: [meetid])
}

model transcript {
  id        String   @id @default(cuid()) @map("_id")
  text      String
  timestamp DateTime @default(now())
  startTime String
  endTime   String
  speaker   Int
  meetingId String
  meeting   meeting  @relation(fields: [meetingId], references: [meetid])
}

enum Role {
  SUPERADMIN
  ADMIN
  OWNER
  USER
  PRESIDENT
  VICEPRESIDENT
}
